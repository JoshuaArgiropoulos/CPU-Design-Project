module multiplication(multiplicand, multiplier, result);
input [31:0] multiplicand, multiplier;
output [63:0] result;

  reg signed [31:0] multiplicand_reg, multiplier_reg;
  reg signed [61:0] result_reg;
  reg signed [63:0] partial_product;
  reg signed [63:0] temp;
  
  integer i, n, j;
  reg [1:0] bit_pairs;
  integer booth_num[31:0];
  integer two_bit_booth[15:0];
  
 /*
 
 booth thinker
 multiplicand
 multiplier
 
 put above into reg
 make bit pair booth number from multiplier (big for loop?)
 enter loop to create final number
 have a 64 bit num with 32 1's
	shift this each loop and use to or with multiplied multiplicand
 do partial products at eaech stage
 
 var needed 
 bit pair num
 64 bit of 1's (might need zeros too)
 parrtial product var (64 bits)
 might also need a placeholder for multi
 */
 
 always @(*) begin
 partial_product = 0;
 multiplier_reg = multiplier;
 multiplicand_reg = multiplicand;
 
for (i = 0; i <= 31; i = i + 1) begin
	//$display("The value of i is %d", i);
	case(i)
		  5'd0: bit_pairs = multiplier_reg[0] << 1;
        5'd1: bit_pairs = multiplier_reg[1:0];
        5'd2: bit_pairs = multiplier_reg[2:1];
        5'd3: bit_pairs = multiplier_reg[3:2];
        5'd4: bit_pairs = multiplier_reg[4:3];
        5'd5: bit_pairs = multiplier_reg[5:4];
        5'd6: bit_pairs = multiplier_reg[6:5];
        5'd7: bit_pairs = multiplier_reg[7:6];
        5'd8: bit_pairs = multiplier_reg[8:7];
        5'd9: bit_pairs = multiplier_reg[9:8];
        5'd10: bit_pairs = multiplier_reg[10:9];
        5'd11: bit_pairs = multiplier_reg[11:10];
        5'd12: bit_pairs = multiplier_reg[12:11];
        5'd13: bit_pairs = multiplier_reg[13:12];
        5'd14: bit_pairs = multiplier_reg[14:13];
        5'd15: bit_pairs = multiplier_reg[15:14];
        5'd16: bit_pairs = multiplier_reg[16:15];
        5'd17: bit_pairs = multiplier_reg[17:16];
        5'd18: bit_pairs = multiplier_reg[18:17];
        5'd19: bit_pairs = multiplier_reg[19:18];
        5'd20: bit_pairs = multiplier_reg[20:19];
        5'd21: bit_pairs = multiplier_reg[21:20];
        5'd22: bit_pairs = multiplier_reg[22:21];
        5'd23: bit_pairs = multiplier_reg[23:22];
        5'd24: bit_pairs = multiplier_reg[24:23];
        5'd25: bit_pairs = multiplier_reg[25:24];
        5'd26: bit_pairs = multiplier_reg[26:25];
        5'd27: bit_pairs = multiplier_reg[27:26];
        5'd28: bit_pairs = multiplier_reg[28:27];
        5'd29: bit_pairs = multiplier_reg[29:28];
        5'd30: bit_pairs = multiplier_reg[30:29];
        5'd31: bit_pairs = multiplier_reg[31:30];
		  default: bit_pairs = multiplier_reg[0:0];
		  endcase
	case(bit_pairs)
			2'b00: booth_num[i] = 0;
			2'b01: booth_num[i] = 1;
			2'b10: booth_num[i] = -1;
			2'b11: booth_num[i] = 0;
			default: booth_num[i] = 0;
		endcase
		//$display("The value of bit_pairs is %b", bit_pairs);
	//$display("The value of booth_num is %d", booth_num[i]);
	end// for i end
	
	for (n = 0; n <= 31; n = n + 2) begin 
	two_bit_booth[n/2] = 2*booth_num[n+1] + booth_num[n];
	//$display("The value of n is %d", n);
	//$display("The value of booth_num is %d", booth_num[n]);
	//$display("The value of two_bit_booth is %d", two_bit_booth[n/2]);
	end // for n loop
	//$display("The value of two_bit_booth is %p", two_bit_booth);
	//$display("The value of booth_num is %p", booth_num);
	//$display("1The value of multiplicand_reg is %b", multiplicand_reg);
	// partial_product = {{32{multiplicand_reg[31]}}, multiplicand_reg};
	//$display("2The value of partial_product is %b", partial_product);
	//$display("The value of partial_product is %b", partial_product);
	//temp = multiplicand_reg * two_bit_booth[0];
	//partial_product = partial_product + {{32{temp[31]}}, temp}; //{ {2{x[5]}}, x } {{32{multiplicand_reg[31]}}, multiplicand_reg}
	//$display("The value of partial_product is %b", partial_product);
	for (j = 0; j <= 15; j = j + 1) begin 
	$display("The value of j is %d", j);
	temp = (multiplicand_reg * two_bit_booth[j]) << 2*j;
	$display("The value of temp is %b", temp);
	partial_product = partial_product + {{32{temp[31]}}, temp};
	//partial_product = partial_product + {{32{multiplicand_reg[31]}}, multiplicand_reg} * two_bit_booth[j]; //{ {2{x[5]}}, x }
	$display("The value of partial_product is %b", partial_product);
	
	end
	
 end
 assign result = partial_product;
 endmodule
 